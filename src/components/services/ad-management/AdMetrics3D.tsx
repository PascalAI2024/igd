import React, { useRef, useState, useMemo } from 'react';
import { Canvas, useThree, useFrame } from '@react-three/fiber';
import { Text, Html, Float, OrbitControls } from '@react-three/drei';
import { EffectComposer, Bloom } from '@react-three/postprocessing';
import { KernelSize } from 'postprocessing';
import * as THREE from 'three';
import { motion, AnimatePresence } from 'framer-motion';
import { DollarSign, Target, TrendingUp, Bell, Zap, BarChart } from 'lucide-react';
import { AnimationErrorBoundary } from '../../../components/AnimationErrorBoundary';

interface MetricData {
  name: string;
  value: number;
  color: string;
  icon: React.ElementType;
  description: string;
}

// Sample metrics data
const metrics: MetricData[] = [
  { 
    name: "ROAS", 
    value: 3.5, 
    color: "#ef4444", // red
    icon: DollarSign,
    description: "Return on Ad Spend - For every $1 spent, you get $3.5 back" 
  },
  { 
    name: "CTR", 
    value: 2.8, 
    color: "#f59e0b", // amber
    icon: Bell,
    description: "Click-Through Rate - Percentage of users who click on your ads" 
  },
  { 
    name: "Reach", 
    value: 4.2, 
    color: "#3b82f6", // blue
    icon: Target,
    description: "Audience Reach - How many potential customers see your ads" 
  },
  { 
    name: "CPC", 
    value: 1.5, 
    color: "#10b981", // emerald
    icon: Zap,
    description: "Cost Per Click - Average cost for each ad click" 
  },
  { 
    name: "Conv", 
    value: 2.0, 
    color: "#8b5cf6", // purple
    icon: TrendingUp,
    description: "Conversion Rate - Percentage of visitors who complete desired actions" 
  },
  { 
    name: "ROI", 
    value: 3.8, 
    color: "#ec4899", // pink
    icon: BarChart,
    description: "Return on Investment - Overall profit generated by ad campaigns" 
  }
];

// 3D Metric Bar component
const MetricBar = ({ 
  metric, 
  index, 
  totalMetrics, 
  isHovered, 
  onClick 
}: { 
  metric: MetricData; 
  index: number; 
  totalMetrics: number;
  isHovered: boolean;
  onClick: () => void;
}) => {
  const meshRef = useRef<THREE.Mesh>(null);
  const glowRef = useRef<THREE.Mesh>(null);
  
  // Calculate position based on index and total metrics
  const angle = (index / totalMetrics) * Math.PI * 2;
  const radius = 3;
  const x = Math.sin(angle) * radius;
  const z = Math.cos(angle) * radius;
  
  // Bar height based on metric value
  const height = metric.value * 0.5;
  
  useFrame(({ clock }) => {
    if (!meshRef.current) return;
    
    // Pulsing animation
    const pulse = Math.sin(clock.getElapsedTime() * 2 + index) * 0.05;
    
    // Apply animations
    if (isHovered) {
      meshRef.current.scale.y = THREE.MathUtils.lerp(meshRef.current.scale.y, 1.1 * height + pulse, 0.1);
    } else {
      meshRef.current.scale.y = THREE.MathUtils.lerp(meshRef.current.scale.y, height + pulse, 0.1);
    }
    
    // Glow effect
    if (glowRef.current) {
      if (isHovered) {
        glowRef.current.scale.set(
          1.2 + Math.sin(clock.getElapsedTime() * 3) * 0.1,
          1.0, // Height stays constant
          1.2 + Math.sin(clock.getElapsedTime() * 3) * 0.1
        );
        (glowRef.current.material as THREE.MeshBasicMaterial).opacity = 
          0.2 + Math.sin(clock.getElapsedTime() * 3) * 0.1;
      } else {
        glowRef.current.scale.x = THREE.MathUtils.lerp(glowRef.current.scale.x, 1, 0.1);
        glowRef.current.scale.z = THREE.MathUtils.lerp(glowRef.current.scale.z, 1, 0.1);
        (glowRef.current.material as THREE.MeshBasicMaterial).opacity = 
          THREE.MathUtils.lerp((glowRef.current.material as THREE.MeshBasicMaterial).opacity, 0.1, 0.1);
      }
    }
  });
  
  // Hover effects
  const [hovered, setHovered] = useState(false);
  
  return (
    <group
      position={[x, 0, z]}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={onClick}
    >
      {/* Base */}
      <mesh position={[0, 0, 0]} rotation={[0, 0, 0]}>
        <cylinderGeometry args={[0.4, 0.4, 0.1, 16]} />
        <meshStandardMaterial color={metric.color} opacity={0.7} transparent />
      </mesh>
      
      {/* Bar */}
      <mesh ref={meshRef} position={[0, height / 2, 0]} scale={[1, height, 1]}>
        <boxGeometry args={[0.5, 1, 0.5]} />
        <meshStandardMaterial 
          color={metric.color} 
          metalness={0.5} 
          roughness={0.2}
          emissive={metric.color}
          emissiveIntensity={0.3}
        />
      </mesh>
      
      {/* Glow effect */}
      <mesh ref={glowRef} position={[0, height / 2, 0]} scale={[1, height, 1]}>
        <boxGeometry args={[0.6, 1, 0.6]} />
        <meshBasicMaterial 
          color={metric.color} 
          transparent 
          opacity={0.1} 
          side={THREE.BackSide} 
        />
      </mesh>
      
      {/* Label */}
      <Text
        position={[0, -0.3, 0]}
        color="white"
        fontSize={0.25}
        anchorX="center"
        anchorY="top"
      >
        {metric.name}
      </Text>
      
      {/* Value */}
      <Text
        position={[0, height + 0.3, 0]}
        color={metric.color}
        fontSize={0.3}
        font="/fonts/Inter-Bold.woff"
        anchorX="center"
        anchorY="bottom"
      >
        {metric.value.toFixed(1)}x
      </Text>
      
      {/* Info panel when hovered */}
      {hovered && (
        <Html position={[0, height + 0.8, 0]} center>
          <div className="bg-black/80 backdrop-blur-md p-2 rounded border border-white/20 text-white text-sm w-40 pointer-events-none">
            <div className="flex items-center justify-center space-x-1 mb-1">
              <metric.icon className="w-4 h-4" style={{ color: metric.color }} />
              <span className="font-semibold">{metric.name}</span>
            </div>
            <p className="text-xs text-gray-300">{metric.description}</p>
          </div>
        </Html>
      )}
    </group>
  );
};

// Central icon that rotates
const CentralIcon = () => {
  const meshRef = useRef<THREE.Mesh>(null);
  
  useFrame(({ clock }) => {
    if (meshRef.current) {
      meshRef.current.rotation.y = clock.getElapsedTime() * 0.5;
    }
  });
  
  return (
    <group>
      <mesh ref={meshRef}>
        <dodecahedronGeometry args={[0.8, 0]} />
        <meshStandardMaterial 
          color="#ef4444" 
          emissive="#ef4444"
          emissiveIntensity={0.5}
          metalness={0.8}
          roughness={0.2}
        />
      </mesh>
      
      {/* Glowing outline */}
      <mesh>
        <sphereGeometry args={[1, 16, 16]} />
        <meshBasicMaterial color="#ef4444" transparent opacity={0.1} side={THREE.BackSide} />
      </mesh>
    </group>
  );
};

// Connecting lines from center to metrics
const ConnectionLines = ({ 
  totalMetrics, 
  hoveredMetric 
}: { 
  totalMetrics: number; 
  hoveredMetric: number | null 
}) => {
  const groupRef = useRef<THREE.Group>(null);
  
  useFrame(({ clock }) => {
    if (groupRef.current) {
      groupRef.current.rotation.y = clock.getElapsedTime() * 0.1;
    }
  });
  
  // Create lines connecting center to each metric
  const lines = useMemo(() => {
    return Array.from({ length: totalMetrics }).map((_, index) => {
      const angle = (index / totalMetrics) * Math.PI * 2;
      const radius = 3;
      const x = Math.sin(angle) * radius;
      const z = Math.cos(angle) * radius;
      
      return { 
        index, 
        end: new THREE.Vector3(x, 0, z),
        color: metrics[index].color
      };
    });
  }, [totalMetrics]);
  
  return (
    <group ref={groupRef}>
      {lines.map((line) => (
        <line key={line.index}>
          <bufferGeometry attach="geometry">
            <bufferAttribute
              attach="attributes-position"
              count={2}
              array={new Float32Array([0, 0, 0, line.end.x, line.end.y, line.end.z])}
              itemSize={3}
            />
          </bufferGeometry>
          <lineBasicMaterial 
            attach="material" 
            color={line.color} 
            transparent 
            opacity={hoveredMetric === line.index ? 0.8 : 0.2} 
            linewidth={1} 
          />
        </line>
      ))}
    </group>
  );
};

// Main 3D Scene
const AdMetricsScene = () => {
  const [hoveredMetric, setHoveredMetric] = useState<number | null>(null);
  const [selectedMetric, setSelectedMetric] = useState<number | null>(null);
  
  return (
    <>
      {/* Ambient light for overall scene brightness */}
      <ambientLight intensity={0.4} />
      
      {/* Directional lights from different angles */}
      <directionalLight position={[5, 5, 5]} intensity={0.5} />
      <directionalLight position={[-5, 5, -5]} intensity={0.3} color="#ef4444" />
      
      {/* Background spherical environment */}
      <mesh>
        <sphereGeometry args={[15, 32, 32]} />
        <meshBasicMaterial color="#000000" side={THREE.BackSide} />
      </mesh>
      
      {/* Grid floor for perspective */}
      <gridHelper 
        args={[20, 20, "#333333", "#222222"]} 
        position={[0, -0.5, 0]} 
      />
      
      {/* Central icon */}
      <CentralIcon />
      
      {/* Connection lines */}
      <ConnectionLines totalMetrics={metrics.length} hoveredMetric={hoveredMetric} />
      
      {/* Metric bars */}
      {metrics.map((metric, index) => (
        <MetricBar 
          key={index}
          metric={metric}
          index={index}
          totalMetrics={metrics.length}
          isHovered={hoveredMetric === index || selectedMetric === index}
          onClick={() => setSelectedMetric(selectedMetric === index ? null : index)}
        />
      ))}
      
      {/* Post-processing effects */}
      <EffectComposer>
        <Bloom 
          luminanceThreshold={0.2}
          luminanceSmoothing={0.9}
          intensity={0.8}
          kernelSize={KernelSize.LARGE}
        />
      </EffectComposer>
      
      {/* Camera controls */}
      <OrbitControls 
        enableZoom={true}
        enablePan={false}
        minDistance={4}
        maxDistance={10}
        autoRotate
        autoRotateSpeed={0.5}
      />
    </>
  );
};

// Fallback component in case 3D rendering fails
const AdMetricsFallback = () => {
  return (
    <div className="bg-black/30 rounded-lg p-8 backdrop-blur-md border border-white/10">
      <div className="text-center mb-6">
        <h3 className="text-2xl font-semibold mb-2">Ad Campaign Performance</h3>
        <p className="text-gray-400">Metrics that drive successful campaigns</p>
      </div>
      
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {metrics.map((metric, index) => (
          <div 
            key={index} 
            className="bg-white/5 rounded-lg p-4 border border-white/10 hover:border-red-500/20 transition-all duration-300"
          >
            <div className="flex items-center mb-2">
              <div 
                className="w-8 h-8 rounded-full flex items-center justify-center mr-3"
                style={{ backgroundColor: `${metric.color}30` }}
              >
                <metric.icon className="w-4 h-4" style={{ color: metric.color }} />
              </div>
              <div>
                <h4 className="font-semibold text-white">{metric.name}</h4>
              </div>
            </div>
            <div className="text-2xl font-bold mb-1" style={{ color: metric.color }}>
              {metric.value.toFixed(1)}x
            </div>
            <p className="text-xs text-gray-400">{metric.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

// Main exported component
const AdMetrics3D: React.FC = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isMobile, setIsMobile] = useState(false);
  
  // Check for mobile devices
  React.useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  
  return (
    <div className="w-full">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Ad Campaign Performance</h2>
        <p className="text-lg text-gray-400">Metrics that drive successful campaigns</p>
      </div>
      
      <div className="h-[500px] w-full mb-12" ref={containerRef}>
        <AnimationErrorBoundary fallback={<AdMetricsFallback />}>
          {!isMobile ? (
            <Canvas dpr={[1, 2]} camera={{ position: [0, 2, 8], fov: 50 }}>
              <AdMetricsScene />
            </Canvas>
          ) : (
            <AdMetricsFallback />
          )}
        </AnimationErrorBoundary>
      </div>
      
      {/* Responsive cards for mobile and SEO */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-6 mt-6">
        {metrics.map((metric, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: index * 0.1 }}
          >
            <div 
              className="bg-white/5 rounded-xl p-5 backdrop-blur-sm border border-white/10 hover:border-red-500/20 transition-all duration-300 h-full"
            >
              <div className="flex items-center mb-3">
                <div 
                  className="w-10 h-10 rounded-full flex items-center justify-center mr-3"
                  style={{ backgroundColor: `${metric.color}30` }}
                >
                  <metric.icon className="w-5 h-5" style={{ color: metric.color }} />
                </div>
                <div>
                  <h4 className="font-semibold text-white">{metric.name}</h4>
                </div>
              </div>
              <div className="text-3xl font-bold mb-2" style={{ color: metric.color }}>
                {metric.value.toFixed(1)}x
              </div>
              <p className="text-sm text-gray-400">{metric.description}</p>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default AdMetrics3D;